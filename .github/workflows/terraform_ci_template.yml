# Reusable workflow for CI of Terraform workloads on Azure.
#
# Prerequisites:
# - A GitHub environment for the plan job
# - A Azure managed identity for the plan job.  It has to have
#   sufficient permission to do what Terraform say, and a federated
#   credential setup with GitHub OIDC.
# - Secrets in the GitHub environment for Azure targeting tenant, sub, managed id.
# 
# Features:
# - Login to Azure with managed identity using OIDC federation (no secret)
# - Post the plan pretty-printed as comment if the originating PR, if any

name: Terraform CI

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
        description: GitHub environment
      terraform-environment:
        type: string
        required: true
        description: Terraform environment folder name in which backend config and tfvars are stored
      terraform-root:
        type: string
        required: true
        description: Root directory of the Terraform script to execute
    secrets:
      ARM_TENANT_ID:
        required: true
        description: Azure Tenant ID
      ARM_SUBSCRIPTION_ID:
        required: true
        description: Azure Subscription ID
      ARM_CLIENT_ID:
        required: true
        description: Azure Client ID of the managed identity that the job will authenticate with
    outputs:
      plan-artifact-name:
        description: Name of the artifact in which the Terraform plan is stored
        value: ${{ jobs.terraform_plan.outputs.plan-artifact-name }}
      plan-artifact-file:
        description: Filename of the plan in the artifact
        value: ${{ jobs.terraform_plan.outputs.plan-artifact-file }}
      has-changes:
        description: Whether the plan has changes to apply
        value: ${{ jobs.terraform_plan.outputs.has-changes }}

jobs:
  terraform_plan:
    name: Terraform Plan
    runs-on: ubuntu-24.04
    environment: ${{ inputs.environment }}

    permissions:
      id-token: write
      contents: read
      pull-requests: write

    outputs:
      plan-artifact-name: ${{ steps.artifact.outputs.name }}
      plan-artifact-file: ${{ steps.artifact.outputs.filename }}
      has-changes: ${{ steps.plan.outputs.exitcode == '2' && 'true' || 'false' }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Azure Login
        uses: azure/login@a65d910e8af852a8061c627c456678983e180302 # v2.2.0
        with:
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          client-id: ${{ secrets.ARM_CLIENT_ID }}

      - name: Read terraform version
        id: tf-version
        shell: bash
        env:
          TERRAFORM_VERSION_FILE: ${{ inputs.terraform-version-file }}
        run: |
          echo "terraform-version=$(cat $TERRAFORM_VERSION_FILE)" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_version: ${{ steps.tf-version.outputs.terraform-version }}

      - name: Terraform cache
        uses: pagopa/ict-github-actions/terraform-cache@81e01d7b8c3302444d389e41f17d283f199ba357
        with:
          terraform-root: ${{ inputs.terraform-root }}
          terraform-env: ${{ inputs.terraform-environment }}

      - name: Terraform Init
        shell: bash
        working-directory: ${{ inputs.terraform-root }}
        env:
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_USE_OIDC: "true"
          ARM_USE_AZUREAD: "true"
          TERRAFORM_ENVIRONMENT: ${{ inputs.terraform-environment }}
        run: |
          terraform init \
              -reconfigure \
              -backend-config="./env/$TERRAFORM_ENVIRONMENT/backend.tfvars"

      - name: Terraform Plan
        id: plan
        shell: bash
        working-directory: ${{ inputs.terraform-root }}
        env:
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_USE_OIDC: "true"
          ARM_USE_AZUREAD: "true"
          TERRAFORM_ENVIRONMENT: ${{ inputs.terraform-environment }}
        run: |
          # don't fail because exit 2 means ok, plan has changes
          set +e
          
          terraform plan \
              -var-file="./env/$TERRAFORM_ENVIRONMENT/terraform.tfvars" \
              -lock=false \
              -out="tfplan-$TERRAFORM_ENVIRONMENT-${{ github.sha }}" \
              -detailed-exitcode

      - name: Check plan status
        if: steps.plan.outputs.exitcode == '1'
        shell: bash
        run: exit 1

      - name: Plan artifact output
        id: artifact
        if: steps.plan.outputs.exitcode == '2'
        shell: bash
        env:
          TERRAFORM_ENVIRONMENT: ${{ inputs.terraform-environment }}
        run: |
          echo "name=tfplan" >> $GITHUB_OUTPUT
          echo "filename=tfplan-$TERRAFORM_ENVIRONMENT-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Upload plan artifact
        uses: actions/upload-artifact@694cdabd8bdb0f10b2cea11669e1bf5453eed0a6 # v4.2.0
        if: steps.plan.outputs.exitcode == '2'
        with:
          name: tfplan
          path: ${{ inputs.terraform-root }}/${{ steps.artifact.outputs.filename }}
          if-no-files-found: error
          retention-days: 7

      - name: Terraform plan plaintext
        id: plantext
        if: steps.plan.outputs.exitcode == '2' && github.event_name == 'pull_request'
        working-directory: ${{ inputs.terraform-root }}
        shell: bash
        env:
          ARTIFACT_FILE: ${{ steps.artifact.outputs.filename }}
        run: |
          terraform show -no-color "$ARTIFACT_FILE" > plan_plain_text.txt

      # Post the plan output in the PR
      # The plan output is posted in a comment in the PR
      # from https://github.com/pagopa/dx/blob/main/.github/workflows/infra_plan.yaml
      - name: Post Plan on PR
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: comment
        if: steps.plan.outputs.exitcode == '2' && github.event_name == 'pull_request'
        with:
          env:
            TERRAFORM_ROOT: ${{ inputs.terraform-root }}
            TERRAFORM_ENVIRONMENT: ${{ inputs.terraform-environment }}
          script: |
            const fs = require('fs');
            const terraformRoot = process.env.TERRAFORM_ROOT;
            const terraformEnvironment = process.env.TERRAFORM_ENVIRONMENT;
            const output = fs.readFileSync(`${terraformRoot}/plan_plain_text.txt`, 'utf8');
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes(`Terraform Plan ('${terraformRoot}') - '${terraformEnvironment}'`)
            })
            const commentBody = `#### ðŸ“– Terraform Plan ('${terraformRoot}') - '${terraformEnvironment}'
            <details>
            <summary>Terraform Plan</summary>

            \`\`\`hcl
            ${output}
            \`\`\`

            </details>
            `;
            if (botComment) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id
              })
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody,
              issue_number: context.issue.number
            })
